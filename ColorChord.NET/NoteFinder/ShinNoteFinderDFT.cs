using ColorChord.NET.API;
using System;
using System.Diagnostics.CodeAnalysis;
using System.Runtime.Intrinsics;
using System.Text;

namespace ColorChord.NET.NoteFinder;

/// <summary> My own note finder implementation. </summary>
public static class ShinNoteFinderDFT
{
    private const int MIN_WINDOW_SIZE = 16;
    private const uint MAX_WINDOW_SIZE = 6144;
    private const uint USHORT_RANGE = ushort.MaxValue + 1;

    private const ushort SINE_TABLE_90_OFFSET = 8;
    private static readonly Vector256<short> SinWave = Vector256.Create(0, 3196, 6270, 9102, 11585, 13622, 15136, 16068, 16383, 16068, 15136, 13622, 11585, 9102, 6270, 3196);

    // The above generated by:
    /*
        const short AMPLITUDE = short.MaxValue / 2;
        for (byte Entry = 0; Entry < 16; Entry++)
        {
            Console.Write(Math.Round(AMPLITUDE * Math.Sin(Entry * Math.Tau / 32)));
            Console.Write(", ");
        }
        Console.WriteLine();
    */

    /// <summary> The number of octaves we will analyze. </summary>
    public static byte OctaveCount = 6;

    /// <summary> The number of frequency bins of data we will output per octave. </summary>
    public static byte BinsPerOctave = ShinNoteFinder.BINS_PER_OCTAVE;

    /// <summary> How long our sample window is. </summary>
    public static uint MaxPresentWindowSize = 8192;

    /// <summary> The sample rate of the incoming audio signal, and our reference waveforms. </summary>
    public static uint SampleRate = 48000;

    public static float StartFrequency = 55f;

    private static uint GlobalSampleCounter = 0;

    /// <summary> The total number of bins over all octaves. </summary>
    public static ushort BinCount => (ushort)(OctaveCount * BinsPerOctave);

    /// <summary> Gets the index of the first bin in the topmost octave. </summary>
    private static ushort StartOfTopOctave => (ushort)((OctaveCount - 1) * BinsPerOctave);

    private static float StartFrequencyOfTopOctave => StartFrequency * MathF.Pow(2, OctaveCount - 1);

    /// <summary> Where raw and resampled audio data is stored. </summary>
    /// <remarks> Indexed by [Octave][Sample], size is [<see cref="OctaveCount"/>][<see cref="MaxPresentWindowSize"/>] </remarks>
    private static short[][] AudioBuffer;

    /// <summary> How large the audio buffer should be treated as being, for each bin. </summary>
    /// <remarks> Indexed by [Bin], size is [<see cref="BinCount"/>] </remarks>
    private static uint[] AudioBufferSizes;

    /// <summary> Where in the audio buffer each bin has added data up to. </summary>
    /// <remarks> Indexed by [Octave], size is [<see cref="OctaveCount"/>] </remarks>
    private static ushort[] AudioBufferAddHeads;

    /// <summary> Where in the audio buffer each bin has removed data up to. </summary>
    /// <remarks> Indexed by [Bin], size is [<see cref="BinCount"/>] </remarks>
    private static ushort[] AudioBufferSubHeads;

    /// <summary> Where raw audio data gets stored as it gets resampled down for lower octaves, size is [<see cref="OctaveCount"/>]</summary>
    private static int[] InterBufferAccumulators;

    /// <summary> How far forward in the sine table this bin should step with every added sample, such that one full sine wave (wrap back to 0) occurs after the number of steps corresponding to the bin frequency. Format is fixed-point 5b+11b. </summary>
    /// <remarks> Indexed by [Bin], size is [<see cref="BinsPerOctave"/>] </remarks>
    private static DualU16[] SinTableStepSize;

    /// <summary>
    /// Where in the sin table the bin is currently at. This is incremented by <see cref="SinTableStepSize"/> every sample.
    /// Format is fixed-point 5b+11b.
    /// Since addition and subtraction of data does not happen in-phase, both are tracked separately.
    /// </summary>
    /// <remarks> Indexed by [Bin], size is [<see cref="BinCount"/>] </remarks>
    private static DualU16[] SinTableLocationAdd, SinTableLocationSub;

    /// <summary> Stores the current value of the sin*sample and cos*sample product sums, for each bin. </summary>
    /// <remarks> Indexed by [Bin], size is [<see cref="BinCount"/>] </remarks>
    private static DualI64[] SinProductAccumulators, CosProductAccumulators;

    /// <summary> Stores the magnitude output of each bin before any filtering is done. </summary>
    /// <remarks> Indexed by [Bin], size is [<see cref="BinCount"/>] </remarks>
    public static float[] RawBinMagnitudes;

    static ShinNoteFinderDFT()
    {
        Log.Info("Starting ShinNoteFinder DFT module");
        Reconfigure();
    }

    /// <summary> Reconfigures all settings and data structures, used when any configuration changes occur that require recalculating internal state. </summary>
    [MemberNotNull(
        nameof(AudioBuffer),
        nameof(AudioBufferSizes),
        nameof(AudioBufferAddHeads), nameof(AudioBufferSubHeads),
        nameof(InterBufferAccumulators),
        nameof(SinTableStepSize), nameof(SinTableLocationAdd), nameof(SinTableLocationSub),
        nameof(SinProductAccumulators), nameof(CosProductAccumulators),
        nameof(RawBinMagnitudes)
    )]
    public static void Reconfigure()
    {
        AudioBuffer = new short[OctaveCount][];
        AudioBufferSizes = new uint[BinCount];
        AudioBufferAddHeads = new ushort[OctaveCount];
        AudioBufferSubHeads = new ushort[BinCount];
        InterBufferAccumulators = new int[OctaveCount];
        SinTableStepSize = new DualU16[BinsPerOctave];
        SinTableLocationAdd = new DualU16[BinCount];
        SinTableLocationSub = new DualU16[BinCount];
        SinProductAccumulators = new DualI64[BinCount];
        CosProductAccumulators = new DualI64[BinCount];
        RawBinMagnitudes = new float[BinCount];

        float TopStart = StartFrequencyOfTopOctave;

        uint MaxAudioBufferSize = 0;
        // Operations that occur on all bins
        for (uint Bin = 0; Bin < BinCount; Bin++)
        {
            uint WrappedBinIndex = Bin % BinsPerOctave;

            float TopOctaveBinFreq = CalculateNoteFrequency(TopStart, BinsPerOctave, WrappedBinIndex);
            float TopOctaveNextBinFreq = CalculateNoteFrequency(TopStart, BinsPerOctave, WrappedBinIndex + 2);
            float IdealWindowSize = WindowSizeForBinWidth(TopOctaveNextBinFreq - TopOctaveBinFreq); // TODO: Add scale factor to shift this from no overlap to -3dB point
            uint ThisBufferSize = RoundedWindowSizeForBinWidth(TopOctaveNextBinFreq - TopOctaveBinFreq, TopOctaveBinFreq, SampleRate);
            //ushort ThisBufferSize = (ushort)Math.Ceiling(IdealWindowSize);
            AudioBufferSizes[Bin] = Math.Min(MAX_WINDOW_SIZE, ThisBufferSize);

            if (Bin == 0) { MaxAudioBufferSize = ThisBufferSize; }

            AudioBufferSubHeads[Bin] = (ushort)(WrappedBinIndex == 0 ? 0 : (1 - ThisBufferSize + MaxAudioBufferSize) % MaxAudioBufferSize);
            
        }
        MaxPresentWindowSize = MaxAudioBufferSize;

        // Operations that occur on only one octave's worth of bins
        for (uint Bin = 0; Bin < BinsPerOctave; Bin++)
        {
            uint BinInTop = StartOfTopOctave + Bin;
            float NCOffset = SampleRate / (AudioBufferSizes[BinInTop] * 2F);
            float StepSizeNCL = USHORT_RANGE * (CalculateNoteFrequency(StartFrequencyOfTopOctave, BinsPerOctave, Bin) - NCOffset) / SampleRate;
            float StepSizeNCR = USHORT_RANGE * (CalculateNoteFrequency(StartFrequencyOfTopOctave, BinsPerOctave, Bin) + NCOffset) / SampleRate;
            SinTableStepSize[Bin].NCLeft  = (ushort)Math.Round(StepSizeNCL);
            SinTableStepSize[Bin].NCRight = (ushort)Math.Round(StepSizeNCR);
        }

        // All bins again, but needs data calculated after the previous one
        for (uint Bin = 0; Bin < BinCount; Bin++) // TODO: See if this can be optimized, low priority since it should happen very rarely
        {
            uint WrappedBinIndex = Bin % BinsPerOctave;
            SinTableLocationSub[Bin].NCLeft  = (ushort)(-(SinTableStepSize[WrappedBinIndex].NCLeft  * (AudioBufferSizes[Bin] - (WrappedBinIndex == 0 ? 0 : 1))));
            SinTableLocationSub[Bin].NCRight = (ushort)(-(SinTableStepSize[WrappedBinIndex].NCRight * (AudioBufferSizes[Bin] - (WrappedBinIndex == 0 ? 0 : 1))));
        }

        // Operations that occur for each octave
        for (int Octave = 0; Octave < OctaveCount; Octave++)
        {
            AudioBuffer[Octave] = new short[MaxAudioBufferSize];
        }

        Log.Debug(nameof(ShinNoteFinder) + " bin window lengths:");
        for (int Octave = 0; Octave < OctaveCount; Octave++)
        {
            StringBuilder OctaveOutput = new();
            OctaveOutput.Append($"{StartFrequency * Math.Pow(2, Octave):F0}Hz~: ");
            for (uint Bin = 0; Bin < BinsPerOctave; Bin++)
            {
                OctaveOutput.Append(AudioBufferSizes[(Octave * BinsPerOctave) + Bin]);
                OctaveOutput.Append(',');
            }
            Log.Debug(OctaveOutput.ToString());
        }
    }

    public static void UpdateSampleRate(uint newSampleRate)
    {
        if (newSampleRate == SampleRate) { return; }
        SampleRate = newSampleRate;
        Reconfigure();
    }

    public static void AddAudioData(ReadOnlySpan<short> newData)
    {
        // TODO: This handles the top octave only
        for (int i = 0; i < newData.Length; i++)
        {
            AddAudioDataToOctave(newData[i], OctaveCount - 1);
            GlobalSampleCounter++;
        }
    }

    public static void AddAudioData(ReadOnlySpan<float> newData) // TODO: Consider removing support for float audio data?
    {
        for (int i = 0; i < newData.Length; i++)
        {
            short NewData = (short)(newData[i] * short.MaxValue);
            AddAudioDataToOctave(NewData, OctaveCount - 1);
            GlobalSampleCounter++;
        }
    }

    private static void AddAudioDataToOctave(short newData, int octave)
    {
        int OctaveBinOffset = octave * BinsPerOctave;

        // Subtract old data from accumulators
        for (int Bin = 0; Bin < BinsPerOctave; Bin++)
        {
            int FullBinIndex = OctaveBinOffset + Bin;

            // Find where we are in the sine table
            DualU16 SinTableLoc = SinTableLocationSub[FullBinIndex];
            DualI16 SinValue = GetSine(SinTableLoc, false);
            DualI16 CosValue = GetSine(SinTableLoc, true);

            // Multiply the outgoing sample by the correct sine sample
            short OldBufferData = AudioBuffer[octave][AudioBufferSubHeads[FullBinIndex]];
            int OldSinProductNCL = SinValue.NCLeft  * OldBufferData;
            int OldSinProductNCR = SinValue.NCRight * OldBufferData;
            int OldCosProductNCL = CosValue.NCLeft  * OldBufferData;
            int OldCosProductNCR = CosValue.NCRight * OldBufferData;

            // Remove the product from the accumulators
            SinProductAccumulators[FullBinIndex].NCLeft  -= OldSinProductNCL;
            SinProductAccumulators[FullBinIndex].NCRight -= OldSinProductNCR;
            CosProductAccumulators[FullBinIndex].NCLeft  -= OldCosProductNCL;
            CosProductAccumulators[FullBinIndex].NCRight -= OldCosProductNCR;

            // Advance the buffer and sine table locations
            AudioBufferSubHeads[FullBinIndex] = (ushort)((AudioBufferSubHeads[FullBinIndex] + 1) % MaxPresentWindowSize);

            DualU16 SinTableStep = SinTableStepSize[Bin];
            SinTableLocationSub[FullBinIndex].NCLeft  += SinTableStep.NCLeft;
            SinTableLocationSub[FullBinIndex].NCRight += SinTableStep.NCRight;

            //if (Bin == 6) { Console.Write($"{SubHeadBefore},{SinTableLoc.NCRight},{OldSinProductNCL},"); }
        }

        // Write new data
        ushort HeadBefore = AudioBufferAddHeads[octave];
        AudioBuffer[octave][HeadBefore] = newData;
        AudioBufferAddHeads[octave] = (ushort)((HeadBefore + 1) % MaxPresentWindowSize);

        // Add new data to accumulators
        for (int Bin = 0; Bin < BinsPerOctave; Bin++)
        {
            int FullBinIndex = OctaveBinOffset + Bin;

            // Find where we are in the sine table
            DualU16 SinTableLoc = SinTableLocationAdd[FullBinIndex];
            DualI16 SinValue = GetSine(SinTableLoc, false);
            DualI16 CosValue = GetSine(SinTableLoc, true);

            // Multiply the incoming sample by the correct sine sample
            int NewSinProductNCL = SinValue.NCLeft  * newData;
            int NewSinProductNCR = SinValue.NCRight * newData;
            int NewCosProductNCL = CosValue.NCLeft  * newData;
            int NewCosProductNCR = CosValue.NCRight * newData;

            // Add the product to the accumulators
            SinProductAccumulators[FullBinIndex].NCLeft  += NewSinProductNCL;
            SinProductAccumulators[FullBinIndex].NCRight += NewSinProductNCR;
            CosProductAccumulators[FullBinIndex].NCLeft  += NewCosProductNCL;
            CosProductAccumulators[FullBinIndex].NCRight += NewCosProductNCR;

            // Advance the sine table locations
            DualU16 SinTableStep = SinTableStepSize[Bin];
            SinTableLocationAdd[FullBinIndex].NCLeft  += SinTableStep.NCLeft;
            SinTableLocationAdd[FullBinIndex].NCRight += SinTableStep.NCRight;

            //if (Bin == 6) { Console.WriteLine($"{HeadBefore},{SinTableLoc.NCRight},{NewSinProductNCL},{SinProductAccumulators[FullBinIndex].NCLeft}"); }
        }

        if (octave > 0 && ((GlobalSampleCounter >> (OctaveCount - 1 - octave)) & 1) != 0) // Need to push audio data down
        {
            //Console.WriteLine($"At {GlobalSampleCounter}, also processing octave {octave - 1}");
            AddAudioDataToOctave((short)((newData + InterBufferAccumulators[octave]) >> 1), octave - 1);
        }
        else { InterBufferAccumulators[octave] = newData; }
    }

    public static void CalculateOutput()
    {
        for (int Bin = 0; Bin < BinsPerOctave; Bin++) { ShinNoteFinder.OctaveBinValues[Bin] = 0; }

        checked
        {
            for (int Bin = 0; Bin < BinCount; Bin++)
            {
                //if (Bin >= 96) { Console.WriteLine($"{Bin},{SinProductAccumulators[Bin].NCLeft},{SinProductAccumulators[Bin].NCRight},{CosProductAccumulators[Bin].NCLeft},{CosProductAccumulators[Bin].NCRight}"); }
                DualU16 CurrentSineLocations = SinTableLocationAdd[Bin];
                float AngleL = CurrentSineLocations.NCLeft  * MathF.Tau / USHORT_RANGE;
                float AngleR = CurrentSineLocations.NCRight * MathF.Tau / USHORT_RANGE;

                (double Sin, double Cos) RotatedL = RotatePoint(SinProductAccumulators[Bin].NCLeft,  CosProductAccumulators[Bin].NCLeft,  AngleL);
                (double Sin, double Cos) RotatedR = RotatePoint(SinProductAccumulators[Bin].NCRight, CosProductAccumulators[Bin].NCRight, AngleR);

                double Sin = RotatedL.Sin * RotatedR.Sin;
                double Cos = RotatedL.Cos * RotatedR.Cos;
                float Magnitude = (float)Math.Sqrt(Math.Max(0F, -(Sin + Cos)));
                RawBinMagnitudes[Bin] = Magnitude / AudioBufferSizes[Bin];

                // Traditional DFT for debugging
                //double SimpleSq = ((double)SinProductAccumulators[Bin].NCLeft * SinProductAccumulators[Bin].NCLeft) + ((double)CosProductAccumulators[Bin].NCLeft * CosProductAccumulators[Bin].NCLeft);
                //RawBinMagnitudes[Bin] = (float)Math.Sqrt(Math.Max(0, SimpleSq)) / AudioBufferSizes[Bin];

                float OutBinVal = MathF.Sqrt(RawBinMagnitudes[Bin]) / 8000;
                ShinNoteFinder.OctaveBinValues[Bin % BinsPerOctave] += OutBinVal / OctaveCount;
                ShinNoteFinder.AllBinValues[Bin] = OutBinVal;
            }
        }
    }

    private static ValueTuple<double, double> RotatePoint(double x, double y, double angle)
    {
        double AngleSin = Math.Sin(angle);
        double AngleCos = Math.Cos(angle);
        double NewX = (x * AngleCos) - (y * AngleSin);
        double NewY = (x * AngleSin) + (y * AngleCos);
        return new(NewX, NewY);
    }

    public static DualI16 GetSine(DualU16 sineTablePosition, bool shiftForCos) // TODO: SIMD this >:D
    {
        byte WholeLocationL = (byte)(((sineTablePosition.NCLeft  >> 11) + (shiftForCos ? SINE_TABLE_90_OFFSET : 0)) & 0b11111);
        byte WholeLocationR = (byte)(((sineTablePosition.NCRight >> 11) + (shiftForCos ? SINE_TABLE_90_OFFSET : 0)) & 0b11111);
        short ValueLowerL = (short)(((WholeLocationL >> 4) == 1 ? -1 : 1) * SinWave[WholeLocationL & 0b1111]); // The sine vector only contains the positive half of the wave, indices in the range 16...31 are just 0...15 but negative value
        short ValueLowerR = (short)(((WholeLocationR >> 4) == 1 ? -1 : 1) * SinWave[WholeLocationR & 0b1111]); // TODO: Optimize to shifts, XOR, SUB to avoid conditional MUL

        byte AdjacentLocationL = (byte)((WholeLocationL + 1) & 0b11111);
        byte AdjacentLocationR = (byte)((WholeLocationR + 1) & 0b11111);
        short ValueUpperL = (short)(((AdjacentLocationL >> 4) == 1 ? -1 : 1) * SinWave[AdjacentLocationL & 0b1111]);
        short ValueUpperR = (short)(((AdjacentLocationR >> 4) == 1 ? -1 : 1) * SinWave[AdjacentLocationR & 0b1111]);

        short FractionalPartL = (short)((((ValueUpperL - ValueLowerL) << 8) * ((sineTablePosition.NCLeft  >> 3) & 0xFF)) >> 16); // Wasting the bottom 3 bits of position precision, but otherwise multiplication may overflow int
        short FractionalPartR = (short)((((ValueUpperR - ValueLowerR) << 8) * ((sineTablePosition.NCRight >> 3) & 0xFF)) >> 16);
        return new() { NCLeft = (short)(ValueLowerL + FractionalPartL), NCRight = (short)(ValueLowerR + FractionalPartR) };
    }

    public struct DualU16
    {
        public ushort NCLeft, NCRight;
        public override readonly string ToString() => $"2xU16 L={this.NCLeft}, R={this.NCRight}";
    }
    public struct DualI16
    {
        public short NCLeft, NCRight;
        public override readonly string ToString() => $"2xI16 L={this.NCLeft}, R={this.NCRight}";
    }
    public struct DualI64
    {
        public long NCLeft, NCRight;
        public override readonly string ToString() => $"2xI32 L={this.NCLeft}, R={this.NCRight}";
    }

    // Everyone loves magic numbers :)
    // These were determined through simulations and regressions, which can be found in the Simulations folder in the root of the ColorChord.NET repository.
    private static float BinWidthAtWindowSize(float windowSize) => 50222.5926786413F / (windowSize + 11.483904495504245F);
    private static float WindowSizeForBinWidth(float binWidth) => Math.Min(MAX_WINDOW_SIZE, Math.Max(MIN_WINDOW_SIZE, (50222.5926786413F / binWidth) - 11.483904495504245F));

    private static uint RoundedWindowSizeForBinWidth(float binWidth, float frequency, float sampleRate)
    {
        float IdealWindowSize = WindowSizeForBinWidth(binWidth);
        float PeriodInSamples = sampleRate / frequency;
        float PeriodsInWindow = IdealWindowSize / PeriodInSamples;
        return (uint)MathF.Round(MathF.Round(PeriodsInWindow) * PeriodInSamples);
    }

    private static float CalculateNoteFrequency(float octaveStart, uint binsPerOctave, uint binIndex) => octaveStart * GetNoteFrequencyMultiplier(binsPerOctave, binIndex);
    private static float GetNoteFrequencyMultiplier(uint binsPerOctave, uint binIndex) => MathF.Pow(2F, (float)binIndex / binsPerOctave);
}
